
@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
<script>
    var infoWindow;
    var map;
    var rectangle;

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 41.850033, lng: -87.6500523 },
            zoom: 11,
            mapTypeId: google.maps.MapTypeId.TERRAIN
        });
        google.maps.event.addListener(map, 'click', function (event) {

            var latlng = new google.maps.LatLng(event.latLng.lat(), event.latLng.lng());
            var geocoder = geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'latLng': latlng },
                function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[1]) {
                        document.getElementById('Ville').value = results[1].formatted_address
                        
                    }
                }
            });

            document.getElementById('Latitude').value = event.latLng.lat()
            document.getElementById('Longitude').value = event.latLng.lng()

        });



        

        var layer = new google.maps.FusionTablesLayer({
            query: {
                select: '\'Geocodable address\'',
                from: '1mZ53Z70NsChnBMm-qEYmSDOvLXgrreLTkQUvvg'
            }
        });
        layer.setMap(map);
        var bounds = {
            north: 44.599,
            south: 44.490,
            east: -78.443,
            west: -78.649
        };
        var bounds = new google.maps.LatLngBounds(
           new google.maps.LatLng(20.39623, 77.85009),
           new google.maps.LatLng(24.39623, 80.85009));

        var rectangle = new google.maps.Rectangle({
            bounds: bounds,
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FF0000',
            fillOpacity: 0.35,
            editable: true,  // Make it editable, set its editable property to true
            draggable: true
        });
        rectangle.setMap(map);



        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        
        var markers = [];
        // [START region_getplaces]
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach(function (marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });
        // Add an event listener on the rectangle.
        rectangle.addListener('bounds_changed', showNewRect);
        // Define an info window on the map.
        infoWindow = new google.maps.InfoWindow();
        function showNewRect(event) {
            var ne = rectangle.getBounds().getNorthEast();
            var sw = rectangle.getBounds().getSouthWest();

            var contentString = '<b>Rectangle moved.</b><br>' +
             'New north-east corner: ' + ne.lat() + ', ' + ne.lng() + '<br>' +
             'New south-west corner: ' + sw.lat() + ', ' + sw.lng();



            // Set the info window's content and position.
            infoWindow.setContent(contentString);
            infoWindow.setPosition(ne);
            infoWindow.open(map);
            
        }


    

               
               


    }


</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD0lGurDaolJ4wzpaDkKNjWst84beoHRyw&callback=initMap"
        type="text/javascript">
</script>
<script type="text/javascript">
    function GetAddress() {
        var lat = parseFloat(document.getElementById("latitude").value);
        var lng = parseFloat(document.getElementById("longitude").value);
        var latlng = new google.maps.LatLng(lat, lng);
        var geocoder = geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'latLng': latlng }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                if (results[1]) {
                    alert("Location: " + results[1].formatted_address);
                }
            }
        });
    }

</script>


        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Localisation</h4>
                <hr />
            </div>
            <div id="map" style="height: 600px; width: 900px">
            </div>
            <div>
                <a id="addStandardMarker" href="#">Add Standard Marker</a>
                <a id="addIconMarker" href="#">Add Icon Marker</a>
            </div>

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })



            <div class="form-group">
                @Html.LabelFor(model => model.Latitude, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Latitude, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(model => model.Latitude, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                </div>
            </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Ville, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Ville, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Ville, "", new { @class = "text-danger" })
                    </div>
                </div>

              

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
           
        }

        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>


